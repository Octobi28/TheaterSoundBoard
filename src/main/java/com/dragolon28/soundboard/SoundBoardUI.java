/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.dragolon28.soundboard;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.*;
import com.formdev.flatlaf.FlatDarkLaf;
import java.io.*;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author zack
 */
public class SoundBoardUI extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(SoundBoardUI.class.getName());
    private static String filepath;
    private static ArrayList<File> soundArray = new ArrayList<>();
    private static SoundEffectButton[] buttons;
    private static Scanner config;
    private static PrintStream configOut;
    private static File configFile;
    private static ObjectMapper mapper;
    private static String jsonName;
    /**
     * Creates new form SounBoardUI
     * @throws java.io.IOException
     */
    public SoundBoardUI() throws IOException{
        initComponents();
        
        configFile = new File("SoundBoardConfig.txt");
        config = new Scanner(configFile);
        if (config.hasNext()){
            filepath = config.nextLine();
        } else {filepath = "";}
        System.out.println("Path: " + filepath);
        config.close();
        
        try {
            makeSoundArray(filepath);
            makeButtons();  
        }
        catch(Exception e){}
        String[] pathWords = filepath.split("/");
        jsonName = pathWords[pathWords.length-1];
        jsonName +=(new File(filepath).listFiles().length);
        try{readJson();} catch(IOException e){}
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        soundFolderSelector = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        folderChoose = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        soundFolderSelector.setAcceptAllFileFilterUsed(false);
        soundFolderSelector.setCurrentDirectory(new java.io.File("/Users/zack/Documents/Python/Theatre Soundborad"));
        soundFolderSelector.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Theater SoundBoard");
        setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        setPreferredSize(new java.awt.Dimension(2000, 1500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridLayout(0, 4));
        jScrollPane1.setViewportView(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 234;
        gridBagConstraints.ipady = 294;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 72, 0, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        folderChoose.setText("Folder");
        folderChoose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                folderChooseMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        getContentPane().add(folderChoose, gridBagConstraints);

        saveButton.setText("Save Json");
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        getContentPane().add(saveButton, gridBagConstraints);

        loadButton.setText("Load Json");
        loadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        getContentPane().add(loadButton, gridBagConstraints);

        jButton4.setText("jButton4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        getContentPane().add(jButton4, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void folderChooseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_folderChooseMouseClicked
         if (soundFolderSelector.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
             makeSoundArray(soundFolderSelector.getSelectedFile().getAbsolutePath());
             filepath = soundFolderSelector.getSelectedFile().getAbsolutePath();
             makeButtons();
             try {
                 writeConfig();
             } catch (IOException ex) {
                 System.getLogger(SoundBoardUI.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
             }
             updateJsonName();
         }
    }//GEN-LAST:event_folderChooseMouseClicked

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        try {
            makeJson(jsonName);// TODO add your handling code here:
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_saveButtonMouseClicked

    private void loadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonMouseClicked
        try {
            readJson();
        } catch (IOException ex) {
            System.getLogger(SoundBoardUI.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
    }//GEN-LAST:event_loadButtonMouseClicked
    
    private void writeConfig() throws IOException{
        configOut = new PrintStream(configFile);
        configOut.print(filepath);
        configOut.close();
    }
    
    private void makeSoundArray(String path){
        soundArray = new ArrayList<>();
        for (File f : new File(path).listFiles()){
            if (f.getName().contains(".mp3") || f.getName().contains(".wav")){
                soundArray.add(f);
            }
        }
    }
    
    private void makeJson(String filename) throws IOException{
        updateJsonName();
        
        mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);
        
        File testJson;
        
        try {
            System.out.println("grabbing file");
            testJson = new File("jsonConfigs/" + filename + ".json");
            if (!testJson.exists())
                throw new Exception();
        } catch(Exception e){
            System.out.println("failed to grab file");
            try{
                System.out.println("tried to make file");
            PrintStream jsonMaker = new PrintStream("jsonConfigs/" + filename + ".json");
            jsonMaker.print("");
            jsonMaker.close();
            } catch(Exception ex){
                System.out.println("failed, making folder");
                new File("jsonConfigs").mkdir();
                PrintStream jsonMaker = new PrintStream("jsonConfigs/" + filename + ".json");
                jsonMaker.print("");
                jsonMaker.close();
            }
            testJson = new File("jsonConfigs/" + filename + ".json");
        }
        
        JsonGenerator g = mapper.createGenerator(testJson, JsonEncoding.UTF8);
        g.writeStartObject();
        g.writeStringField("path", filepath);
        for (SoundEffectButton button : buttons){
            g.writeArrayFieldStart(button.getPath());
            g.writeArray(button.getValues(), 0, 2);
            g.writeEndArray();
        }
        g.writeEndObject();
        g.close();
    }
    
    private void readJson() throws IOException{
        updateJsonName();
        try {
            String path = "jsonConfigs/"+jsonName+".json";
            mapper = new ObjectMapper();
            System.out.println("Reading json: " + path);
            JsonNode tree = mapper.readTree(new File(path));
            for (SoundEffectButton button: buttons){
                button.setVolume(tree.get(button.getPath()).get(0).get(1).asInt());
                button.setStartPos(tree.get(button.getPath()).get(0).get(0).asInt());
            }
            jPanel1.validate();
            jPanel1.repaint();
        } catch (Exception ex) {
            System.out.println("no appropriate json found, skipping");
        }
        
    }
    
    private void updateJsonName(){
        String[] pathWords = filepath.split("/");
        jsonName = pathWords[pathWords.length-1];
        jsonName +=(new File(filepath).listFiles().length);
    }
    
    private void makeButtons(){
        jPanel1.removeAll();
        buttons = new SoundEffectButton[soundArray.size()];
        for (int i = 0; i < buttons.length; i++){
            if (soundArray.get(i).getName().contains(".mp3") || soundArray.get(i).getName().contains(".wav")){
                buttons[i] = new SoundEffectButton(soundArray.get(i));
                jPanel1.add(buttons[i]);
            }
        }
        jPanel1.validate();
        jPanel1.repaint();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        
        
        FlatDarkLaf.setup();
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new SoundBoardUI().setVisible(true);
            } catch (IOException ex) {
                System.getLogger(SoundBoardUI.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton folderChoose;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JFileChooser soundFolderSelector;
    // End of variables declaration//GEN-END:variables
}
